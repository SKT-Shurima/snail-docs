import{_ as s,o as a,c as o,U as p}from"./chunks/framework.835c9fd2.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Git/gh-pages分支发布静态项目.md","filePath":"Git/gh-pages分支发布静态项目.md","lastUpdated":1632912264000}'),n={name:"Git/gh-pages分支发布静态项目.md"},e=p(`<h3 id="gh-pages分支发布静态项目" tabindex="-1">gh-pages分支发布静态项目 <a class="header-anchor" href="#gh-pages分支发布静态项目" aria-label="Permalink to &quot;gh-pages分支发布静态项目&quot;">​</a></h3><p>对于<code>React</code> <code>Vue</code> 之类的项目，开发完成之后上传到<code>Git</code> 仓库，但是如果想通过借助<code>Git</code>提供的pages，来实现打包之后<code>dist</code>静态文件的预览就比较困难；</p><p>解决方案：</p><ol><li><p>克隆项目到本地 <code>git clone &quot;git@github.com:xxx.git&quot;</code></p></li><li><p>安装依赖打包构建 <code>npm i &amp;&amp; npm run build</code> 或 <code>yarn install &amp;&amp; yarn run build</code></p></li><li><p>进入<code>build</code> 文件夹下 <code>cd build</code></p></li><li><p>然后就是<code>git</code> 初始化，创建<code>gh-pages</code>分支，然后将<code>dist</code>文件夹下的文件提交推送到远程仓库</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--orphan</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gh-pages</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">feat: init project</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">origin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git@github.com:xxx.git</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">origin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gh-pages</span></span></code></pre></div></li><li><p>然后在 Github 该项目下，setting 设置中的 pages 选择 gh-pages 分支；</p></li></ol><p>原理解释：</p><p>其实就是创建了一个新的分支，然后将打包后的文件<code>dist</code>，上传至该分支，这样源代码和打包后的静态文件都在一个 project 下，通过不同的 branch 来进行管理；</p><p>Github 的 pages 地址指向静态文件所在的分支即可；</p>`,7),l=[e];function t(c,r,i,C,d,y){return a(),o("div",null,l)}const A=s(n,[["render",t]]);export{g as __pageData,A as default};
