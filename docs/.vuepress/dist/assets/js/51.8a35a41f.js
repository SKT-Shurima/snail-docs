(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{445:function(t,e,s){"use strict";s.r(e);var a=s(22),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"route"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#route"}},[t._v("#")]),t._v(" Route")]),t._v(" "),s("h4",{attrs:{id:"history"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#history"}},[t._v("#")]),t._v(" history")]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("react-route")]),t._v(" 监听路由变化：")]),t._v(" "),s("div",{staticClass:"language-react extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const unlisten = this.props.history.listen(location => {\n  // 通过最新路由的 pathname 来判断路由是否发生变化\n  if(this.props.location.pathname !== location.pathname){\n    // 路由发生变化逻辑\n  }\n});\n")])])]),s("p",[s("code",[t._v("history.listen")]),t._v(" 自动返回 "),s("code",[t._v("unlisten")]),t._v(" 函数用来取消监听，可在"),s("code",[t._v("componentWillUnmount")]),t._v("中使用；注：该监听方法只在所注册的组件所在的路由中有效；")])])}),[],!1,null,null,null);e.default=n.exports}}]);