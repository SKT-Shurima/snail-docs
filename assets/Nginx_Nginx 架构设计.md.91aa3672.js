import{_ as e,G as n,o as t,c as a,L as o,w as s,U as i,a as _}from"./chunks/framework.835c9fd2.js";const r="/snail-docs/assets/nginx01.2203ee2f.png",P=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Nginx/Nginx 架构设计.md","filePath":"Nginx/Nginx 架构设计.md","lastUpdated":1632969299000}'),p={name:"Nginx/Nginx 架构设计.md"},c=i('<h3 id="nginx-服务器的-web-请求处理机制" tabindex="-1">Nginx 服务器的 Web 请求处理机制 <a class="header-anchor" href="#nginx-服务器的-web-请求处理机制" aria-label="Permalink to &quot;Nginx 服务器的 Web 请求处理机制&quot;">​</a></h3><p>Web 服务器和客户端是一对多的关系，一般完成并行处理请求的工作有三种方式：</p><ol><li><p>多进程方式</p><ul><li>概念：服务器每当接收到一个客户端请求时，就由服务器主进程<strong>生成一个子进程</strong>和该客户端连接进行交互，直至断开；</li><li>优点：设计实现简单，子进程相互独立，当某个子进程出现问题不会影响其他进程，保证稳定；当子进程退出，其占用资源会被操作系统回收，也不会留下垃圾；</li><li>缺点：操作系统生成一个子进程需要进行内存复制等操作，在资源和时间上会产生一定的额外开销，不适用于处理大量并发请求；</li></ul></li><li><p>多线程方式</p><ul><li>概念： 服务器每当接收到一个客户端请求时，会由服务器主进程<strong>派生一个线程</strong>出来和该客户端进行交互；</li><li>优点：减轻 Web 服务器对系统资源的要求；</li><li>缺点：多个线程位于同一个进程，可以访问同样的内存空间，彼此之间相互影响；</li></ul></li><li><p>异步方式</p><p>通讯模式：同步、异步；</p><p>进程处理调用方式：阻塞、非阻塞；</p><ul><li>同步阻塞：发送方向接收方发送请求后，（发送方）一直等待响应，请求方一直等待结果；</li><li>同步非阻塞：发送方向接收方发送请求后，（发送方）一直等待响应，请求方进行 IO 操作如果没能马上收到结果，立即返回；</li><li>异步阻塞：发送方向接收方发送请求后，（发送方）不用等待响应，请求方如果没能马上得到结果，就一直等待；</li><li>异步非阻塞：发送方向接收方发送请求后，（发送方）不用等待响应，请求方如果没能马上得到结果，不等待，知道有结果之后再返回给发送方；</li></ul><p>Nginx 异步机制采用的是异步非阻塞；</p></li></ol><p><img src="'+r+'" alt="Nginx服务器架构示意图"></p>',4),g=i('<h4 id="nginx-服务器的进程" tabindex="-1">Nginx 服务器的进程 <a class="header-anchor" href="#nginx-服务器的进程" aria-label="Permalink to &quot;Nginx 服务器的进程&quot;">​</a></h4><ul><li><p>主进程（Master Process）</p><p>作用：与外界通信和对内部的其他进程进行管理；</p><ul><li>读取 Nginx 配置文件并验证有效性和正确性；</li><li>建立、绑定、关闭 socket；</li><li>按照配置生成、管理和结束工作进程；</li><li>接收外界指令，eg：重启、升级、退出等</li><li>不中断服务，实现平滑重启，应用新配置；平滑升级，升级失败进行回滚处理</li><li>开启日志文件，获取文件描述符；</li><li>编译和处理 Perl 脚本；</li></ul></li><li><p>工作进程 （Worker Process）</p><p>由主进程生成，生成数量可以通过 Nginx 配置文件指定，正常情况下生存于主进程整个生命周期。</p><ul><li>接收客户端请求；</li><li>将请求一次送入各个功能模块进行过滤处理；</li><li>IO 调用，获取响应数据；</li><li>与后端服务器通信，接收后端服务器处理结果；</li><li>数据缓存，访问缓存索引、查询、调用缓存数据；</li><li>发送请求结果，响应客户端请求；</li><li>接收主程序指令，比如重启、升级、退出指令；</li></ul></li></ul>',2);function x(d,u,N,h,m,T){const l=n("center");return t(),a("div",null,[c,o(l,null,{default:s(()=>[_("Nginx 服务架构示意图")]),_:1}),g])}const b=e(p,[["render",x]]);export{P as __pageData,b as default};
